name: Deploy AI Agents

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
  SUPABASE_PROJECT_REF: cxzllzyxwpyptfretryc

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint --if-present
      
      - name: Run tests
        run: npm run test --if-present

  deploy-edge-functions:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        function:
          - name: retailbot
            path: supabase/functions/retailbot
          - name: adsbot
            path: supabase/functions/adsbot
          - name: aladdin
            path: supabase/functions/aladdin
          - name: sql-certifier
            path: supabase/functions/sql-certifier
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Deploy ${{ matrix.function.name }}
        run: |
          supabase link --project-ref $SUPABASE_PROJECT_REF
          supabase functions deploy ${{ matrix.function.name }} --no-verify-jwt
      
      - name: Verify deployment
        run: |
          echo "Testing ${{ matrix.function.name }} endpoint..."
          curl -f https://$SUPABASE_PROJECT_REF.supabase.co/functions/v1/${{ matrix.function.name }}/capabilities || exit 1

  update-secrets:
    needs: deploy-edge-functions
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Update secrets
        run: |
          supabase link --project-ref $SUPABASE_PROJECT_REF
          supabase secrets set GROQ_API_KEY=${{ secrets.GROQ_API_KEY }} --if-not-exists
          supabase secrets set OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} --if-not-exists

  deploy-dashboard:
    needs: deploy-edge-functions
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build dashboard
        env:
          NEXT_PUBLIC_SUPABASE_URL: https://${{ env.SUPABASE_PROJECT_REF }}.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_GENIE_URL: https://${{ env.SUPABASE_PROJECT_REF }}.supabase.co/functions/v1/aladdin
          NEXT_PUBLIC_RETAILBOT_URL: https://${{ env.SUPABASE_PROJECT_REF }}.supabase.co/functions/v1/retailbot
          NEXT_PUBLIC_ADSBOT_URL: https://${{ env.SUPABASE_PROJECT_REF }}.supabase.co/functions/v1/adsbot
        run: npm run build
      
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          production: true

  integration-tests:
    needs: [deploy-edge-functions, deploy-dashboard]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run integration tests
        run: |
          # Test RetailBot
          curl -X POST https://$SUPABASE_PROJECT_REF.supabase.co/functions/v1/retailbot/analyze \
            -H "Content-Type: application/json" \
            -d '{"query": "What were sales yesterday?"}' \
            | jq .analysis
          
          # Test AdsBot  
          curl -X POST https://$SUPABASE_PROJECT_REF.supabase.co/functions/v1/adsbot/analyze \
            -H "Content-Type: application/json" \
            -d '{"campaign_data": {"impressions": 1000, "clicks": 50}}' \
            | jq .performance_metrics
          
          # Test Aladdin
          curl -X POST https://$SUPABASE_PROJECT_REF.supabase.co/functions/v1/aladdin \
            -H "Content-Type: application/json" \
            -d '{"prompt": "Summarize today", "analysis_type": "summary"}' \
            | jq .insights
          
          # Test SQL Certifier
          curl -X POST https://$SUPABASE_PROJECT_REF.supabase.co/functions/v1/sql-certifier \
            -H "Content-Type: application/json" \
            -d '{"intent": "daily metrics", "parameters": {"start_date": "2024-01-01", "end_date": "2024-01-31"}}' \
            | jq .approved

  notify:
    needs: integration-tests
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.integration-tests.result }}" == "success" ]; then
            echo "✅ All agents deployed successfully!"
          else
            echo "❌ Deployment failed. Check logs for details."
            exit 1
          fi